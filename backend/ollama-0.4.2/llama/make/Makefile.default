# Include common definitions
include make/common-defs.make

# Compiler flags
CPU_GOFLAGS = -ldflags="-w -s -X=github.com/ollama/ollama/version.Version=$(VERSION) -X=github.com/ollama/ollama/llama.CpuFeatures=$(subst $(space),$(comma),$(TARGET_CPU_FLAGS)) $(TARGET_LDFLAGS)"
DEFAULT_RUNNER := $(if $(and $(filter darwin,$(OS)),$(filter arm64,$(ARCH))),metal,cpu)
RUNNERS := $(DEFAULT_RUNNER)

# Debugging info
$(info CUSTOM_CPU_FLAGS: $(CUSTOM_CPU_FLAGS), $(ARCH), $(TARGET_LDFLAGS))

ifeq ($(ARCH),amd64)
ifeq ($(CUSTOM_CPU_FLAGS),)
    RUNNERS += cpu_avx cpu_avx2
endif
endif

$(info CUSTOM_CPU_FLAGS: $(CUSTOM_CPU_FLAGS), $(RUNNERS))

# Placeholder for spaces
SPACE_PLACEHOLDER = __SPACE__

# Escape paths by replacing spaces with a placeholder
define ESCAPE
$(subst $(space),$(SPACE_PLACEHOLDER),$1)
endef

# Unescape paths by replacing the placeholder with spaces
define UNESCAPE
$(subst $(SPACE_PLACEHOLDER),$(space),$1)
endef

# Escaped definitions
DIST_RUNNERS = $(foreach runner,$(RUNNERS),$(call ESCAPE,$(RUNNERS_DIST_DIR)/$(runner)/ollama_llama_server$(EXE_EXT)))
ifneq ($(OS),windows)
PAYLOAD_RUNNERS = $(foreach runner,$(RUNNERS),$(call ESCAPE,$(RUNNERS_PAYLOAD_DIR)/$(runner)/ollama_llama_server$(EXE_EXT).gz))
endif
BUILD_RUNNERS = $(foreach runner,$(RUNNERS),$(call ESCAPE,$(RUNNERS_BUILD_DIR)/$(runner)/ollama_llama_server$(EXE_EXT)))

# Debugging logs
$(info RUNNERS=$(RUNNERS))
$(info BUILD_RUNNERS=$(BUILD_RUNNERS))
$(info DIST_RUNNERS=$(DIST_RUNNERS))
$(info PAYLOAD_RUNNERS=$(PAYLOAD_RUNNERS))
$(info RUNNERS_DIST_DIR=$(RUNNERS_DIST_DIR))
$(info RUNNERS_BUILD_DIR=$(RUNNERS_BUILD_DIR))
$(info RUNNERS_PAYLOAD_DIR=$(RUNNERS_PAYLOAD_DIR))

# Build targets
all: $(BUILD_RUNNERS) $(DIST_RUNNERS) $(PAYLOAD_RUNNERS)

# Default runner build rule
$(call ESCAPE,$(RUNNERS_BUILD_DIR))/$(DEFAULT_RUNNER)/ollama_llama_server$(EXE_EXT): TARGET_CPU_FLAGS=$(CUSTOM_CPU_FLAGS)
$(call ESCAPE,$(RUNNERS_BUILD_DIR))/$(DEFAULT_RUNNER)/ollama_llama_server$(EXE_EXT): *.go ./runner/*.go $(COMMON_SRCS) $(COMMON_HDRS)
	@echo "Building runner: $(call UNESCAPE,$@) with CPU flags: $(CUSTOM_CPU_FLAGS)"
	@echo "Creating directory: $(call UNESCAPE,$(dir $@))"
	@-mkdir -p "$(call UNESCAPE,$(dir $@))"
	@ls *.go # Debugging: list Go files
	GOARCH=$(ARCH) go build -v -x -buildvcs=false -buildmode=pie $(CPU_GOFLAGS) -trimpath $(if $(CUSTOM_CPU_FLAGS),-tags $(subst $(space),$(comma),$(CUSTOM_CPU_FLAGS))) -o "$(call UNESCAPE,$@)" ./runner || (echo "Build failed for $@" && exit 1)
	@echo "Build complete. Verifying binary existence..."
	@ls "$(call UNESCAPE,$@)"

# AVX runner build rule
$(call ESCAPE,$(RUNNERS_BUILD_DIR))/cpu_avx/ollama_llama_server$(EXE_EXT): TARGET_CPU_FLAGS="avx"
$(call ESCAPE,$(RUNNERS_BUILD_DIR))/cpu_avx/ollama_llama_server$(EXE_EXT): *.go ./runner/*.go $(COMMON_SRCS) $(COMMON_HDRS)
	@echo "Building AVX runner: $(call UNESCAPE,$@)"
	@mkdir -p "$(call UNESCAPE,$(dir $@))"
	GOARCH=$(ARCH) go build -v -x -buildvcs=false -buildmode=pie $(CPU_GOFLAGS) -trimpath -tags $(subst $(space),$(comma),$(TARGET_CPU_FLAGS)) -o "$(call UNESCAPE,$@)" ./runner || (echo "Build failed for $@" && exit 1)
	@ls "$(call UNESCAPE,$@)"

# AVX2 runner build rule
$(call ESCAPE,$(RUNNERS_BUILD_DIR))/cpu_avx2/ollama_llama_server$(EXE_EXT): TARGET_CPU_FLAGS="avx avx2"
$(call ESCAPE,$(RUNNERS_BUILD_DIR))/cpu_avx2/ollama_llama_server$(EXE_EXT): *.go ./runner/*.go $(COMMON_SRCS) $(COMMON_HDRS)
	@echo "Building AVX2 runner: $(call UNESCAPE,$@)"
	@mkdir -p "$(call UNESCAPE,$(dir $@))"
	GOARCH=$(ARCH) go build -buildmode=pie -v -x -buildvcs=false $(CPU_GOFLAGS) -trimpath -tags $(subst $(space),$(comma),$(TARGET_CPU_FLAGS)) -o "$(call UNESCAPE,$@)" ./runner || (echo "Build failed for $@" && exit 1)
	@ls "$(call UNESCAPE,$@)"

# Copy runners
$(call ESCAPE,$(RUNNERS_DIST_DIR))/%: $(call ESCAPE,$(RUNNERS_BUILD_DIR))/%
	@echo "Copying $(call UNESCAPE,$<) to $(call UNESCAPE,$@)"
	@mkdir -p "$(call UNESCAPE,$(dir $@))"
	cp "$(call UNESCAPE,$<)" "$(call UNESCAPE,$@)" || (echo "Copy failed for $<" && exit 1)

# Compress runners
$(call ESCAPE,$(RUNNERS_PAYLOAD_DIR))/%/ollama_llama_server$(EXE_EXT).gz: $(call ESCAPE,$(RUNNERS_BUILD_DIR))/%/ollama_llama_server$(EXE_EXT)
	@echo "Compressing $(call UNESCAPE,$<) to $(call UNESCAPE,$@)"
	@mkdir -p "$(call UNESCAPE,$(dir $@))"
	$(GZIP) --best -c "$(call UNESCAPE,$<)" > "$(call UNESCAPE,$@)" || (echo "Compression failed for $<" && exit 1)

# Cleanup
clean:
	@echo "Cleaning build, dist, and payload runners..."
	@rm -rf "$(RUNNERS_BUILD_DIR)" "$(RUNNERS_PAYLOAD_DIR)" "$(RUNNERS_DIST_DIR)"
	@echo "Cleanup complete."

# Debugging
debug:
	@echo "RUNNERS=$(RUNNERS)"
	@echo "BUILD_RUNNERS=$(BUILD_RUNNERS)"
	@echo "DIST_RUNNERS=$(DIST_RUNNERS)"
	@echo "PAYLOAD_RUNNERS=$(PAYLOAD_RUNNERS)"
	@echo "TARGET_CPU_FLAGS=$(CUSTOM_CPU_FLAGS)"
	@echo "CPU_GOFLAGS=$(CPU_GOFLAGS)"
	@echo "RUNNERS_DIST_DIR=$(RUNNERS_DIST_DIR)"
	@echo "RUNNERS_BUILD_DIR=$(RUNNERS_BUILD_DIR)"
	@echo "RUNNERS_PAYLOAD_DIR=$(RUNNERS_PAYLOAD_DIR)"
